#!/usr/bin/env python3
# Applies greedy weighted set cover to select a set of small molecules that
# cover as many parameters as possible in the smirnoff force field. Run with -h
# flag for usage.

import argparse
import json
import logging
import operator
from copy import deepcopy
from functools import reduce

from openeye import oechem

import utilize_params_util


def parse_commandline_flags() -> {str: "argument value"}:
    """Uses argparse to parse all command line flags"""
    logging.info("Parsing command line flags")

    parser = argparse.ArgumentParser(
        description=(
            "Applies greedy weighted set cover to select a set of small "
            "molecules that cover as many parameters as possible in the "
            "smirnoff force field. Generates two data files: chosen.smi "
            "lists the molecules selected and remaining.json lists "
            "remaining parameter ids. All input files should be the "
            "params_by_molecule.json file output by check_param_coverage. "
            "One can choose to ignore certain parameters by listing them "
            "in a JSON file. These parameters will be excluded when trying "
            "to find a covering set, and when listing remaining ids."),
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument(
        "--required",
        metavar="FILE 1,FILE 2,...",
        default="",
        help=("A comma-separated list of files with molecules "
              "which must be included"))
    parser.add_argument(
        "--optional",
        metavar="FILE 1,FILE 2,...",
        default="",
        help=("A comma-separated list of files with molecules "
              "which do not have to be included"))
    parser.add_argument(
        "--ignore",
        metavar="JSON FILE",
        default=None,
        help=("A JSON file containing a list of parameter ids to ignore"))
    parser.add_argument(
        "-d",
        default=".",
        metavar="DIRECTORY",
        help="The directory to save data generated by the script")

    args = vars(parser.parse_args())

    args["required"] = args["required"].split(',') \
                            if args["required"] != "" else []
    args["optional"] = args["optional"].split(',') \
                            if args["optional"] != "" else []

    logging.info("args: %s", str(args))

    return args


def load_molecule_set(files: [str]) -> {"SMILES": {"param ids"}}:
    """Loads the molecules in the given files into a dict"""
    logging.info("loading molecules in files %s", str(files))
    params_by_molecule = {}
    for filename in files:
        with open(filename, "r") as f:
            data = json.load(f)
            for index in data:
                smiles = data[index]["smiles"]
                params = set(data[index]["ids"].keys())
                params_by_molecule[smiles] = params
    logging.info("molecules finished loading")
    return params_by_molecule


def remove_ignored_params(ignore_params: set(), *molecule_param_sets):
    """
    Modifies the given sets of molecule parameters in-place by removing the
    ignored parameters from them
    """
    for param_set in molecule_param_sets:
        for smile in param_set:
            param_set[smile] -= ignore_params


def calculate_molecule_costs(
        molecules: "iterable of SMILES strings") -> {"SMILES"}:
    """Calculates the cost associated with each molecule"""
    costs = {}
    for smi in molecules:
        mol = oechem.OEMol()
        oechem.OESmilesToMol(mol, smi)
        costs[smi] = mol.NumAtoms()
    return costs


def greedy_weighted_set_cover(sets: {str: {str}}, costs: {str: int or float},
                              required_sets: {str: {str}},
                              target_params: {str}) -> ["SMILES"]:
    """
    Attempts to find a set of molecules which cover all params
    possible while minimizing cost.
    """
    logging.info("Executing greedy weighted set cover")
    result = []
    covered = set()

    logging.info("Creating initial set from required molecules")
    for s in required_sets:
        result.append(s)
        covered |= required_sets[s]

    # Avoid modifying original data
    sets = deepcopy(sets)

    # Remove the parameters that were just added
    for smi in tuple(sets):
        sets[smi] -= covered
        # Remove sets of size 0 so we no longer have to deal with them - not
        # truly necessary, but it helps cut down on time
        if len(sets[smi]) == 0:
            sets.pop(smi)

    # Keep finding the molecule with the lowest cost
    while len(covered) != len(target_params):
        # One pass to find the min
        min_cost = None
        min_smi = None
        for smi in sets:
            cost = costs[smi] / len(sets[smi])
            if min_cost is None or cost < min_cost:
                min_cost = cost
                min_smi = smi

        result.append(min_smi)
        new_params = deepcopy(sets[min_smi])
        covered |= sets[min_smi]

        logging.info("selected molecule: %s", min_smi)
        logging.info("new params: %s", new_params)
        logging.info("cost: %f", min_cost)

        # One pass to remove
        for smi in tuple(sets):
            sets[smi] -= new_params
            if len(sets[smi]) == 0:
                sets.pop(smi)

    logging.info("done - selected %d molecules", len(result))
    return result


def save_molecules_to_smi(smiles: [str], filename: str):
    """Writes the given smiles strings to the given file"""
    with open(filename, "w") as f:
        for smi in smiles:
            f.write(smi + "\n")


def main():
    logging.getLogger().setLevel(logging.INFO)

    args = parse_commandline_flags()
    smirnoff_ids = utilize_params_util.find_smirnoff_params(
        utilize_params_util.SMIRNOFF)

    ignore_params = set()
    if args["ignore"] != None:
        with open(args["ignore"], "r") as ignore_file:
            ignore_params = set(json.load(ignore_file))

    required_params_by_molecule = load_molecule_set(args["required"])
    optional_params_by_molecule = load_molecule_set(args["optional"])
    optional_costs = calculate_molecule_costs(optional_params_by_molecule)
    remove_ignored_params(ignore_params, required_params_by_molecule,
                          optional_params_by_molecule)
    target_params = reduce(operator.or_,
                           optional_params_by_molecule.values(), set()) | \
                    reduce(operator.or_,
                           required_params_by_molecule.values(), set())

    logging.info("%d target_params (excludes ignored): %s", len(target_params),
                 target_params)

    final_molecules = greedy_weighted_set_cover(
        optional_params_by_molecule, optional_costs,
        required_params_by_molecule, target_params)

    logging.info("Saving chosen molecules to chosen.smi")
    save_molecules_to_smi(final_molecules, f"{args['d']}/chosen.smi")

    logging.info("Saving remaining parameters to remaining.json")
    with open(f"{args['d']}/remaining.json", "w") as jsonfile:
        json.dump(
            sorted(
                smirnoff_ids - target_params - ignore_params,
                key=utilize_params_util.order_param_id), jsonfile)


if __name__ == '__main__':
    main()
